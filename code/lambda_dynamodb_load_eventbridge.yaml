AWSTemplateFormatVersion: 2010-09-09
Description: Data Solutions Day stack to load data into DynamoDB table

Resources:
  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: LambdaFunctionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: '*'
          - Effect: Allow
            Action:
              - dynamodb:*
              - ec2:*
              - cloudwatch:*
            Resource: '*'
  CustomBackedLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CustomBackedLambda
      Runtime: python3.9
      Role: !GetAtt LambdaFunctionRole.Arn
      Handler: index.lambda_handler
      Timeout: 90
      Code:
        ZipFile: |
          import cfnresponse
          import logging
          import random
          import boto3

          # Init of the logging module
          logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

          def lambda_handler(event, context):
            tableidentifier='questmember'
            questnames = {
                "30 minutes of exercise":"1001",
                "Walk 10,000 steps":"1002",
                "Walk 100,000":"1003",
                "Run 10k":"1004",
                "Run 5k":"1005"
            }
            dyn_resource = boto3.resource('dynamodb')
            for key in questnames:
                table = dyn_resource.Table(tableidentifier)
                questid='Q#'+questnames[key]
                table.put_item(Item={
                            'PK': questid,
                            'SK': 'METADATA',
                            'Quest':key
                        })
            #print(f"Put item ({questid}, {key}) succeeded.")
            key_count = 1000
            for partition_key in range(1, key_count + 1):
                    memberid='M#'+str(random.randint(1000,1000000))
                    #firstname=names.get_first_name()
                    #lastname=names.get_last_name()
                    #emailid=firstname+"."+lastname+"@dummyemail.com"
                    firstname='fname'
                    lastname='lname'
                    emailid='dummy@dummy.com'
                    numberofquest=random.randint(1,5)
                    try:
                        table.put_item(Item={
                            'PK': memberid,
                            'SK': 'METADATA',
                            'firstname':firstname,
                            'lastname':lastname,
                            'emailid':emailid
                        },ConditionExpression='attribute_not_exists(PK)')
                    except Exception:
                        pass
                  
            for quest_loop in range(1,numberofquest ):
              questname=random.choice(list(questnames.keys()))
              questid='Q#'+questnames[questname]
              table.put_item(Item={
                          'PK': memberid,
                          'SK': questid,
                          'dollars_earned': random.randint(1,10)#round(random.uniform(0.0, 9.0),2)
                      })
            message = f"This code is finally working"
            responseData = {}
            responseData['message'] = message
            logging.info('Sending %s to cloudformation', responseData['message'])
            print(f"Put item ({memberid}, {questid}) succeeded.")
 
      Environment:
        Variables:
          myvar: var01
      Description: Custom lambda cloudformation

  InvokeCustomLambda:
    DependsOn: CustomBackedLambda
    Type: Custom::InvokeCustomLambda
    Properties:
      ServiceToken: !GetAtt CustomBackedLambda.Arn
  ScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "ScheduledRule"
      ScheduleExpression: "rate(1 minute)"
      State: "ENABLED"
      Targets:
        -
          Arn:
            Fn::GetAtt:
              - "CustomBackedLambda"
              - "Arn"
          Id: "TargetFunctionV1"

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: "CustomBackedLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "ScheduledRule"
          - "Arn"
Outputs:
  CustomLambdaOutput: 
    Description: Message from custom lambda
    Value: !GetAtt InvokeCustomLambda.message
